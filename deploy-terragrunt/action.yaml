name: 'Terragrunt Action with AWS OIDC'
description: 'Execute terragrunt plan or apply operations with AWS OIDC authentication'

branding:
  icon: 'cloud'
  color: 'orange'

inputs:
  github-token:
    description: 'GitHub token with required permissions'
    required: true
  service-name:
    description: 'Service name for terragrunt execution'
    required: true
  environment:
    description: 'Environment name (develop, staging, production, etc.)'
    required: true
  action-type:
    description: 'Action type: plan or apply'
    required: true
  plan-iam-role:
    description: 'IAM role for plan operations'
    required: true
  apply-iam-role:
    description: 'IAM role for apply operations'
    required: true
  aws-region:
    description: 'AWS region'
    required: true
  working-directory:
    description: 'Working directory for terragrunt execution'
    required: true
  repository:
    description: 'Repository name (owner/repo)'
    required: true

outputs:
  execution-status:
    description: 'Execution status (success/failure)'
    value: ${{ steps.parse-results.outputs.status }}
  execution-output:
    description: 'Execution output'
    value: ${{ steps.parse-results.outputs.output }}
  is-failed:
    description: 'Whether execution failed'
    value: ${{ steps.parse-results.outputs.is-failed }}

runs:
  using: 'composite'
  steps:
    - name: Checkout source repository
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}
        token: ${{ inputs.github-token }}

    - name: Validate working directory
      shell: bash
      run: |
        echo "🔍 Validating working directory: ${{ inputs.working-directory }}"
        echo "Repository: ${{ inputs.repository }}"
        echo "Service: ${{ inputs.service-name }}"
        echo "Environment: ${{ inputs.environment }}"
        echo "Action Type: ${{ inputs.action-type }}"

        if [ ! -d "${{ inputs.working-directory }}" ]; then
          echo "::error::Working directory '${{ inputs.working-directory }}' does not exist"
          echo "This may indicate a configuration issue or the service structure has changed."
          echo "Available directories:"
          find . -type d -name "*terragrunt*" -o -name "*${{ inputs.service-name }}*" | head -10
          exit 1
        fi

        if [ ! -f "${{ inputs.working-directory }}/terragrunt.hcl" ]; then
          echo "::warning::No terragrunt.hcl found in ${{ inputs.working-directory }}"
          echo "This may be expected depending on the Service structure."
        fi

        echo "✅ Working directory validated: ${{ inputs.working-directory }}"

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.action-type == 'plan' && inputs.plan-iam-role || inputs.apply-iam-role }}
        aws-region: ${{ inputs.aws-region }}
        role-session-name: GitHubActions-Terragrunt-${{ inputs.action-type }}-${{ inputs.environment }}
        audience: sts.amazonaws.com

    - name: Verify AWS credentials
      shell: bash
      run: |
        echo "🔐 Verifying AWS credentials"
        echo "Role: ${{ inputs.action-type == 'plan' && inputs.plan-iam-role || inputs.apply-iam-role }}"
        echo "Region: ${{ inputs.aws-region }}"
        echo "Session: GitHubActions-Terragrunt-${{ inputs.action-type }}-${{ inputs.environment }}"
        aws sts get-caller-identity
        echo "✅ AWS credentials configured successfully"

    - name: Execute Terragrunt
      id: terragrunt
      uses: gruntwork-io/terragrunt-action@v2
      with:
        tf_version: '1.12.2'
        tg_version: '0.81.6'
        tg_command: ${{ inputs.action-type }}
        tg_add_approve: ${{ inputs.action-type == 'apply' && '1' || '' }}
        tg_dir: ${{ inputs.working-directory }}
      continue-on-error: true
      env:
        TF_INPUT: false
        GITHUB_TOKEN: ${{ inputs.github-token }}
        AWS_DEFAULT_REGION: ${{ inputs.aws-region }}

    - name: Parse execution results
      if: always()
      id: parse-results
      uses: actions/github-script@v7
      with:
        script: |
          console.log('📊 Parsing Terragrunt execution results');
          console.log('Exit Code: ${{ steps.terragrunt.outputs.tg_action_exit_code }}');
          console.log('Action Type: ${{ inputs.action-type }}');

          // Determine status and failure state using exit code
          const exitCode = '${{ steps.terragrunt.outputs.tg_action_exit_code }}';
          const status = exitCode === '0' ? '✅ Success' : `❌ Failed (exit code: ${exitCode})`;
          const isFailed = exitCode !== '0' ? 'true' : 'false';

          // URL decode the content
          let output;
          try {
            const encoded = `${{ steps.terragrunt.outputs.tg_action_output }}`.trim();

            if (!encoded) {
              output = '${{ inputs.action-type }} execution completed. See workflow logs for detailed output.';
            } else {
              // URL decode the content
              const decoded = decodeURIComponent(encoded);

              // Truncate if too long
              const maxLength = 30000;
              if (decoded.length > maxLength) {
                output = decoded.substring(0, maxLength) + '... (output truncated, see workflow logs for full details)';
              } else {
                output = decoded;
              }
            }
          } catch (error) {
            output = `Error processing output: ${error.message}. See workflow logs for detailed output.`;
          }

          // Set outputs
          core.setOutput('status', status);
          core.setOutput('is-failed', isFailed);
          core.setOutput('output', output);

          console.log('📊 Execution Summary:');
          console.log(`Status: ${status}`);
          console.log('Action: ${{ inputs.action-type }}');
          console.log('Service: ${{ inputs.service-name }}');
          console.log('Environment: ${{ inputs.environment }}');
