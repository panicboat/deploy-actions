name: 'Label Resolver'
description: 'Resolve deployment targets from PR labels and branch information'
author: 'panicboat'

branding:
  icon: 'git-pull-request'
  color: 'blue'

inputs:
  repository:
    description: 'Repository name (owner/repo)'
    required: true
  pr-number:
    description: 'PR number (from prepare job output or event)'
    required: false
  environments:
    description: 'Target environments (comma-separated: develop,staging or single: develop)'
    required: false
  github-token:
    description: 'GitHub token with appropriate permissions'
    required: true
  config-path:
    description: 'Path to workflow configuration file'
    required: false
    default: 'workflow-config.yaml'

outputs:
  targets:
    description: 'Deployment targets JSON'
    value: ${{ steps.extract.outputs.targets }}
  has-targets:
    description: 'Whether targets found'
    value: ${{ steps.extract.outputs.has-targets }}
  safety-status:
    description: 'Safety check status'
    value: ${{ steps.extract.outputs.safety-status }}

runs:
  using: 'composite'
  steps:
    - name: Checkout deploy-actions
      uses: actions/checkout@v5
      with:
        repository: panicboat/deploy-actions
        path: deploy-actions

    - name: Checkout source repository
      uses: actions/checkout@v5
      with:
        repository: ${{ inputs.repository }}
        token: ${{ inputs.github-token }}
        path: source-repo

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.4.7'
        bundler-cache: true
        working-directory: deploy-actions/action-scripts

    - name: Copy configuration from source repository
      uses: actions/github-script@v7
      with:
        script: |
          const path = require('path');
          const copyConfiguration = require(path.join(process.env.GITHUB_ACTION_PATH, 'copy-configuration.js'));
          await copyConfiguration({ core, inputs: ${{ toJSON(inputs) }} });

    - name: Validate configuration
      shell: bash
      working-directory: deploy-actions/action-scripts
      run: |
        echo "üîç Validating configuration file"
        bundle exec ruby config-manager/bin/config-manager validate
      env:
        WORKFLOW_CONFIG_PATH: workflow-config.yaml

    - name: Resolve deployment targets
      id: extract
      shell: bash
      working-directory: deploy-actions/action-scripts
      run: |
        echo "üöÄ Starting deployment target resolution"
        echo "PR: ${{ inputs.pr-number }}"

        bundle exec ruby label-resolver/bin/resolver resolve ${{ inputs.pr-number }} ${{ inputs.environments }}
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        GITHUB_REPOSITORY: ${{ inputs.repository }}
        WORKFLOW_CONFIG_PATH: workflow-config.yaml
        SOURCE_REPO_PATH: ${{ github.workspace }}/source-repo

    - name: Parse deployment outputs
      id: parse
      uses: actions/github-script@v7
      env:
        DEPLOYMENT_TARGETS: ${{ steps.extract.outputs.targets }}
        HAS_TARGETS: ${{ steps.extract.outputs.has-targets }}
        SAFETY_STATUS: ${{ steps.extract.outputs.safety-status }}
      with:
        script: |
          const path = require('path');
          const parseOutputs = require(path.join(process.env.GITHUB_ACTION_PATH, 'parse-deployment-outputs.js'));
          await parseOutputs({ core, context });

    - name: Report results
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const path = require('path');
          const reportResults = require(path.join(process.env.GITHUB_ACTION_PATH, 'report-results.js'));
          await reportResults({
            core,
            inputs: ${{ toJSON(inputs) }},
            steps: {
              extract: {
                outputs: {
                  'has-targets': '${{ steps.extract.outputs.has-targets }}',
                  'safety-status': '${{ steps.extract.outputs.safety-status }}'
                }
              }
            }
          });
