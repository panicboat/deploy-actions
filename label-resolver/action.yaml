name: 'Deploy Resolver'
description: 'Resolve deployment targets from PR labels and branch information'
author: 'panicboat'

branding:
  icon: 'git-pull-request'
  color: 'blue'

inputs:
  action-type:
    description: 'Action type: plan or apply'
    required: true
  pr-number:
    description: 'PR number (from prepare job output or event)'
    required: false
  repository:
    description: 'Repository name (owner/repo)'
    required: true
  github-token:
    description: 'GitHub token with appropriate permissions'
    required: true
  config-path:
    description: 'Path to workflow configuration file'
    required: false
    default: 'workflow-config.yaml'
  deploy-actions-repository:
    description: 'Deploy actions repository to use'
    required: false
    default: 'panicboat/deploy-actions'

outputs:
  targets:
    description: 'Deployment targets JSON'
    value: ${{ steps.extract.outputs.targets }}
  has-targets:
    description: 'Whether targets found'
    value: ${{ steps.extract.outputs.has-targets }}
  target-environment:
    description: 'Target environment'
    value: ${{ steps.extract.outputs.target-environment }}
  safety-status:
    description: 'Safety check status'
    value: ${{ steps.extract.outputs.safety-status }}

runs:
  using: 'composite'
  steps:
    - name: Checkout deploy-actions
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.deploy-actions-repository }}
        path: deploy-actions

    - name: Checkout source repository
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}
        token: ${{ inputs.github-token }}
        path: source-repo

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.4'
        bundler-cache: true
        working-directory: deploy-actions/action-scripts

    - name: Copy configuration from source repository
      uses: actions/github-script@v7
      with:
        script: |
          const copyConfiguration = require('./copy-configuration.js');
          await copyConfiguration({ core, inputs: ${{ toJSON(inputs) }} });

    - name: Validate configuration
      shell: bash
      working-directory: deploy-actions/action-scripts
      run: |
        echo "🔍 Validating configuration file"
        bundle exec ruby config-manager/bin/config-manager validate
      env:
        WORKFLOW_CONFIG_PATH: workflow-config.yaml

    - name: Resolve deployment targets
      id: extract
      shell: bash
      working-directory: deploy-actions/action-scripts
      run: |
        echo "🚀 Starting deployment target resolution"
        echo "Action type: ${{ inputs.action-type }}"
        echo "PR: ${{ inputs.pr-number }}"

        if [ "${{ inputs.action-type }}" = "plan" ]; then
          echo "Processing plan event"
          if [ -z "${{ inputs.pr-number }}" ]; then
            echo "::error::PR number is required for plan events"
            exit 1
          fi
          bundle exec ruby deploy-resolver/bin/resolver resolve ${{ inputs.pr-number }}
        else
          echo "Processing apply event"
          if [ -z "${{ inputs.pr-number }}" ]; then
            echo "::error::No merged PR found - deployment stopped"
            echo "has-targets=false" >> $GITHUB_OUTPUT
            echo "safety-status=no_merged_pr" >> $GITHUB_OUTPUT
            exit 0
          fi
          bundle exec ruby deploy-resolver/bin/resolver resolve ${{ inputs.pr-number }}
        fi
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        GITHUB_REPOSITORY: ${{ inputs.repository }}
        WORKFLOW_CONFIG_PATH: workflow-config.yaml
        SOURCE_REPO_PATH: ${{ github.workspace }}/source-repo

    - name: Parse deployment outputs
      id: parse
      uses: actions/github-script@v7
      env:
        DEPLOYMENT_TARGETS: ${{ steps.extract.outputs.targets }}
        HAS_TARGETS: ${{ steps.extract.outputs.has-targets }}
        TARGET_ENVIRONMENT: ${{ steps.extract.outputs.target-environment }}
        SAFETY_STATUS: ${{ steps.extract.outputs.safety-status }}
      with:
        script: |
          const parseOutputs = require('./parse-deployment-outputs.js');
          await parseOutputs({ core, context });

    - name: Report results
      if: always()
      uses: actions/github-script@v7
      with:
        script: |
          const reportResults = require('./report-results.js');
          await reportResults({ 
            core, 
            inputs: ${{ toJSON(inputs) }}, 
            steps: {
              extract: {
                outputs: {
                  'has-targets': '${{ steps.extract.outputs.has-targets }}',
                  'target-environment': '${{ steps.extract.outputs.target-environment }}',
                  'safety-status': '${{ steps.extract.outputs.safety-status }}'
                }
              }
            }
          });
