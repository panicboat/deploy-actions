#!/usr/bin/env ruby

# CLI interface for deploy resolver functionality

require_relative '../application'
require 'thor'

class DeployResolverCLI < Thor
  desc "resolve PR_NUMBER", "Resolve deployment from PR labels (environment determined from current branch)"

  def resolve(pr_number)
    controller = DeployResolverContainer.resolve(:deploy_resolver_controller)

    controller.resolve_from_labels(pr_number: pr_number.to_i)
  end

  desc "test PR_NUMBER", "Test deployment workflow without execution"

  def test(pr_number)
    controller = DeployResolverContainer.resolve(:deploy_resolver_controller)
    controller.test_deployment_workflow(pr_number: pr_number.to_i)
  end

  desc "simulate PR_NUMBER", "Simulate GitHub Actions environment locally"

  def simulate(pr_number)
    controller = DeployResolverContainer.resolve(:deploy_resolver_controller)
    controller.simulate_github_actions(pr_number: pr_number.to_i)
  end

  desc "validate_env", "Validate environment configuration for deployments"

  def validate_env
    required_vars = %w[GITHUB_TOKEN GITHUB_REPOSITORY]
    missing_vars = required_vars.reject { |var| ENV[var] }

    if missing_vars.any?
      puts "::error::Missing required environment variables: #{missing_vars.join(', ')}"
      exit 1
    end

    puts "✅ Environment is properly configured for deployments"
    puts "Repository: #{ENV['GITHUB_REPOSITORY']}"
    puts "Token present: #{ENV['GITHUB_TOKEN'] ? 'Yes' : 'No'}"
    puts "Current branch: #{`git branch --show-current`.strip rescue 'unknown'}"
  end

  desc "debug PR_NUMBER", "Debug deployment workflow step by step"

  def debug(pr_number)
    puts "🔍 Debug Mode: Deploy Resolver Workflow"
    puts "PR Number: #{pr_number}"
    puts ""

    controller = DeployResolverContainer.resolve(:deploy_resolver_controller)
    controller.debug_deployment_workflow(pr_number: pr_number.to_i)
  end
end

DeployResolverCLI.start(ARGV)
