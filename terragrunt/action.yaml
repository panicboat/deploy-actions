name: 'Terragrunt Action with AWS OIDC'
description: 'Execute terragrunt plan or apply operations with AWS OIDC authentication'

branding:
  icon: 'cloud'
  color: 'orange'

inputs:
  github-token:
    description: 'GitHub token with required permissions'
    required: true
  service-name:
    description: 'Service name for terragrunt execution'
    required: true
  environment:
    description: 'Environment name (develop, staging, production, etc.)'
    required: true
  action-type:
    description: 'Action type: plan or apply'
    required: true
  iam-role:
    description: 'IAM role for plan/apply operations'
    required: true
  aws-region:
    description: 'AWS region'
    required: true
  working-directory:
    description: 'Working directory for terragrunt execution'
    required: true
  repository:
    description: 'Repository name (owner/repo)'
    required: true
  pr-number:
    description: 'Pull request number for commenting'
    required: false

outputs:
  execution-status:
    description: 'Execution status (success/failure)'
    value: ${{ steps.parse-results.outputs.status }}
  execution-output:
    description: 'Execution output'
    value: ${{ steps.parse-results.outputs.output }}
  is-failed:
    description: 'Whether execution failed'
    value: ${{ steps.parse-results.outputs.is-failed }}

runs:
  using: 'composite'
  steps:
    - name: Checkout source repository
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}
        token: ${{ inputs.github-token }}

    - name: Validate working directory
      uses: actions/github-script@v7
      with:
        script: |
          const path = require('path');
          const validateWorkingDirectory = require(path.join(process.env.GITHUB_ACTION_PATH, 'validate-working-directory.js'));
          await validateWorkingDirectory({ core, inputs: ${{ toJSON(inputs) }} });

    - name: Configure AWS credentials
      uses: aws-actions/configure-aws-credentials@v4
      with:
        role-to-assume: ${{ inputs.iam-role }}
        aws-region: ${{ inputs.aws-region }}
        role-session-name: GitHubActions-Terragrunt-${{ inputs.action-type }}-${{ inputs.environment }}
        audience: sts.amazonaws.com

    - name: Verify AWS credentials
      uses: actions/github-script@v7
      with:
        script: |
          const path = require('path');
          const verifyCredentials = require(path.join(process.env.GITHUB_ACTION_PATH, 'verify-aws-credentials.js'));
          await verifyCredentials({ core, inputs: ${{ toJSON(inputs) }} });

    - name: Execute Terragrunt
      id: terragrunt
      uses: gruntwork-io/terragrunt-action@v3
      with:
        tg_version: '0.83.2'
        tofu_version: '1.6.0'
        tg_dir: ${{ inputs.working-directory }}
        tg_command: ${{ inputs.action-type }}
        tg_add_approve: ${{ inputs.action-type == 'apply' && '1' || '' }}
        github_token: ${{ inputs.github-token }}
      continue-on-error: true
      env:
        TF_INPUT: false
        GITHUB_TOKEN: ${{ inputs.github-token }}
        AWS_DEFAULT_REGION: ${{ inputs.aws-region }}

    - name: Parse execution results
      if: always()
      id: parse-results
      uses: actions/github-script@v7
      with:
        script: |
          const path = require('path');
          const parseResults = require(path.join(process.env.GITHUB_ACTION_PATH, 'parse-results.js'));
          await parseResults({
            core,
            inputs: ${{ toJSON(inputs) }},
            steps: {
              terragrunt: {
                outputs: {
                  tg_action_exit_code: '${{ steps.terragrunt.outputs.tg_action_exit_code }}',
                  tg_action_output: `${{ steps.terragrunt.outputs.tg_action_output }}`
                }
              }
            }
          });

    - name: Comment PR with Terragrunt results
      if: inputs.pr-number != ''
      uses: thollander/actions-comment-pull-request@v3
      with:
        message: |
          ## üèóÔ∏è Terragrunt ${{ inputs.action-type }} Results

          **Service**: `${{ inputs.service-name }}`
          **Environment**: `${{ inputs.environment }}`
          **Status**: ${{ steps.parse-results.outputs.status }}

          <details>
          <summary>üìã Terragrunt Output</summary>

          ```hcl
          ${{ steps.parse-results.outputs.output }}
          ```
          </details>
        comment-tag: "terragrunt-${{ inputs.service-name }}-${{ inputs.environment }}"
        mode: upsert
        pr-number: ${{ inputs.pr-number }}
        GITHUB_TOKEN: ${{ inputs.github-token }}
        reactions: ${{ steps.parse-results.outputs.is-failed == 'true' && 'confused' || 'rocket' }}
      continue-on-error: true
