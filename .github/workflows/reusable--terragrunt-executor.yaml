name: 'Reusable - Terragrunt Executor'

on:
  workflow_call:
    inputs:
      project-name:
        required: true
        type: string
        description: 'Project name for terragrunt execution'
      environment:
        required: true
        type: string
        description: 'Environment name (develop, staging, production, etc.)'
      action-type:
        required: true
        type: string
        description: 'Action type: plan or apply'
      plan-iam-role:
        required: true
        type: string
        description: 'IAM role for plan operations'
      apply-iam-role:
        required: true
        type: string
        description: 'IAM role for apply operations'
      aws-region:
        required: true
        type: string
        description: 'AWS region'
      working-directory:
        required: true
        type: string
        description: 'Working directory for terragrunt execution'
      repository:
        required: true
        type: string
        description: 'Repository name (owner/repo)'
    secrets:
      github-token:
        required: true
        description: 'GitHub token generated by calling workflow'
    outputs:
      execution-status:
        description: 'Execution status'
        value: ${{ jobs.execute-terragrunt.outputs.execution-status }}
      execution-output:
        description: 'Execution output'
        value: ${{ jobs.execute-terragrunt.outputs.execution-output }}
      is-failed:
        description: 'Whether execution failed'
        value: ${{ jobs.execute-terragrunt.outputs.is-failed }}

jobs:
  validate-setup:
    name: 'Validate Setup'
    runs-on: ubuntu-latest
    outputs:
      is-valid: ${{ steps.validate.outputs.is-valid }}
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          token: ${{ secrets.github-token }}

      - name: Validate working directory
        id: validate
        run: |
          echo "üîç Validating working directory: ${{ inputs.working-directory }}"
          echo "Repository: ${{ inputs.repository }}"
          echo "Project: ${{ inputs.project-name }}"
          echo "Environment: ${{ inputs.environment }}"
          echo "Action Type: ${{ inputs.action-type }}"
          
          if [ ! -d "${{ inputs.working-directory }}" ]; then
            echo "::error::Working directory '${{ inputs.working-directory }}' does not exist"
            echo "This may indicate a configuration issue or the service structure has changed."
            echo "Available directories:"
            find . -type d -name "*terragrunt*" -o -name "*${{ inputs.project-name }}*" | head -10
            echo "is-valid=false" >> $GITHUB_OUTPUT
            exit 1
          fi
          
          # Check for terragrunt configuration
          if [ ! -f "${{ inputs.working-directory }}/terragrunt.hcl" ]; then
            echo "::warning::No terragrunt.hcl found in ${{ inputs.working-directory }}"
            echo "This may be expected depending on the project structure."
          fi
          
          echo "‚úÖ Working directory validated: ${{ inputs.working-directory }}"
          echo "is-valid=true" >> $GITHUB_OUTPUT

  execute-terragrunt:
    name: 'Execute Terragrunt (${{ inputs.action-type }})'
    needs: validate-setup
    if: needs.validate-setup.outputs.is-valid == 'true'
    runs-on: ubuntu-latest
    outputs:
      execution-status: ${{ steps.parse.outputs.status }}
      execution-output: ${{ steps.parse.outputs.output }}
      is-failed: ${{ steps.parse.outputs.is-failed }}
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          token: ${{ secrets.github-token }}

      - name: Configure AWS credentials
        uses: aws-actions/configure-aws-credentials@v4
        with:
          role-to-assume: ${{ inputs.action-type == 'plan' && inputs.plan-iam-role || inputs.apply-iam-role }}
          aws-region: ${{ inputs.aws-region }}
          role-session-name: GitHubActions-Terragrunt-${{ inputs.action-type }}-${{ inputs.environment }}
          audience: sts.amazonaws.com

      - name: Verify AWS credentials
        run: |
          echo "üîê Verifying AWS credentials"
          aws sts get-caller-identity
          echo "‚úÖ AWS credentials configured successfully"

      - name: Execute Terragrunt ${{ inputs.action-type }}
        id: terragrunt
        uses: gruntwork-io/terragrunt-action@v2
        with:
          tf_version: '1.12.2'
          tg_version: '0.81.6'
          tg_command: ${{ inputs.action-type }}
          tg_add_approve: ${{ inputs.action-type == 'apply' && '1' || '' }}
          tg_dir: ${{ inputs.working-directory }}
        continue-on-error: true
        env:
          TF_INPUT: false
          GITHUB_TOKEN: ${{ secrets.github-token }}
          AWS_DEFAULT_REGION: ${{ inputs.aws-region }}

      - name: Parse execution results
        if: always()
        id: parse
        run: |
          echo "üìä Parsing Terragrunt execution results"
          echo "Outcome: ${{ steps.terragrunt.outcome }}"
          echo "Action Type: ${{ inputs.action-type }}"
          
          # Determine status
          if [ "${{ steps.terragrunt.outcome }}" = "success" ]; then
            STATUS="success"
            IS_FAILED="false"
          else
            STATUS="failure"
            IS_FAILED="true"
          fi
          
          # Get output (truncate if too long)
          OUTPUT="${{ steps.terragrunt.outputs.tg_action_output }}"
          if [ ${#OUTPUT} -gt 10000 ]; then
            OUTPUT="${OUTPUT:0:10000}... (truncated)"
          fi
          
          echo "status=${STATUS}" >> $GITHUB_OUTPUT
          echo "is-failed=${IS_FAILED}" >> $GITHUB_OUTPUT
          
          # Use heredoc for multi-line output
          echo "output<<EOF" >> $GITHUB_OUTPUT
          echo "${OUTPUT}" >> $GITHUB_OUTPUT
          echo "EOF" >> $GITHUB_OUTPUT
          
          echo "üìã Execution Summary:"
          echo "  Status: ${STATUS}"
          echo "  Failed: ${IS_FAILED}"
          echo "  Project: ${{ inputs.project-name }}"
          echo "  Environment: ${{ inputs.environment }}"
          echo "  Action: ${{ inputs.action-type }}"

  exit-with-status:
    name: 'Exit with Appropriate Status'
    needs: [validate-setup, execute-terragrunt]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check final status
        run: |
          echo "üèÅ Checking final execution status"
          echo "Setup Valid: ${{ needs.validate-setup.outputs.is-valid }}"
          echo "Execution Failed: ${{ needs.execute-terragrunt.outputs.is-failed }}"
          
          if [ "${{ needs.validate-setup.outputs.is-valid }}" != "true" ]; then
            echo "::error::Setup validation failed for ${{ inputs.project-name }}:${{ inputs.environment }}"
            echo "Working directory '${{ inputs.working-directory }}' validation failed"
            exit 1
          fi

          if [ "${{ needs.execute-terragrunt.outputs.is-failed }}" == "true" ]; then
            echo "::error::Terragrunt ${{ inputs.action-type }} failed for ${{ inputs.project-name }}:${{ inputs.environment }}"
            echo "Check the execution logs for details"
            exit 1
          fi

          echo "‚úÖ Terragrunt ${{ inputs.action-type }} completed successfully for ${{ inputs.project-name }}:${{ inputs.environment }}"