name: 'Reusable - Kubernetes Executor'

on:
  workflow_call:
    inputs:
      service-name:
        required: true
        type: string
        description: 'Service name for kubernetes manifest generation'
      environment:
        required: true
        type: string
        description: 'Environment name (develop, staging, production, etc.)'
      source-path:
        required: true
        type: string
        description: 'Source path for kustomize build (e.g., demo-service/kubernetes/overlays/develop)'
      target-repository:
        required: false
        type: string
        default: panicboat/generated-manifests
        description: 'Target repository for generated manifests (e.g., panicboat/generated-manifests)'
      target-branch:
        required: false
        type: string
        default: main
        description: 'Target branch for generated manifests'
      action-type:
        required: false
        type: string
        default: diff
        description: 'Action type: diff (plan/preview) or apply (execute)'
      repository:
        required: true
        type: string
        description: 'Repository name (owner/repo)'
    secrets:
      github-token:
        required: true
        description: 'GitHub token generated by calling workflow'
    outputs:
      build-status:
        description: 'Build status'
        value: ${{ jobs.build-manifests.outputs.status }}
      build-failed:
        description: 'Whether build failed'
        value: ${{ jobs.build-manifests.outputs.build-failed }}
      deploy-pr-number:
        description: 'GitOps PR number'
        value: ${{ jobs.deploy-to-gitops.outputs.pr-number }}
      has-changes:
        description: 'Whether there are changes'
        value: ${{ jobs.deploy-to-gitops.outputs.has-changes }}

jobs:
  build-manifests:
    name: 'Build Kubernetes Manifests'
    runs-on: ubuntu-latest
    outputs:
      status: ${{ steps.build.outputs.status }}
      output-file: ${{ steps.build.outputs.output-file }}
      build-failed: ${{ steps.build.outputs.build-failed }}
    steps:
      - name: Checkout source repository
        uses: actions/checkout@v4
        with:
          repository: ${{ inputs.repository }}
          token: ${{ secrets.github-token }}

      - name: Validate source path
        run: |
          echo "üîç Validating Kubernetes source path"
          echo "Source path: ${{ inputs.source-path }}"
          echo "Service: ${{ inputs.service-name }}"
          echo "Environment: ${{ inputs.environment }}"
          
          if [ ! -d "${{ inputs.source-path }}" ]; then
            echo "::error::Source path '${{ inputs.source-path }}' does not exist"
            echo "Available kubernetes directories:"
            find . -type d -name "*kubernetes*" -o -name "*k8s*" | head -10
            exit 1
          fi
          
          echo "‚úÖ Source path validated"

      - name: Install kustomize
        run: |
          echo "üîß Installing kustomize"
          curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
          sudo mv kustomize /usr/local/bin/
          kustomize version
          echo "‚úÖ Kustomize installed"

      - name: Build Kubernetes manifests
        id: build
        run: |
          echo "üèóÔ∏è Building Kubernetes manifests"
          echo "Source: ${{ inputs.source-path }}"
          echo "Service: ${{ inputs.service-name }}"
          
          # Create output directory
          mkdir -p generated-manifests
          OUTPUT_FILE="generated-manifests/${{ inputs.service-name }}-generated.yaml"
          
          # Build with kustomize
          if kustomize build "${{ inputs.source-path }}" > "${OUTPUT_FILE}" 2>build-error.log; then
            echo "‚úÖ Manifest build successful"
            echo "status=success" >> $GITHUB_OUTPUT
            echo "build-failed=false" >> $GITHUB_OUTPUT
            echo "output-file=${OUTPUT_FILE}" >> $GITHUB_OUTPUT
            
            # Show generated manifest info
            echo "üìã Generated manifest info:"
            echo "  File: ${OUTPUT_FILE}"
            echo "  Size: $(wc -c < "${OUTPUT_FILE}") bytes"
            echo "  Resources: $(grep -c '^apiVersion:' "${OUTPUT_FILE}")"
          else
            echo "‚ùå Manifest build failed"
            echo "::error::Kustomize build failed for ${{ inputs.source-path }}"
            echo "Build errors:"
            cat build-error.log
            echo "status=failure" >> $GITHUB_OUTPUT
            echo "build-failed=true" >> $GITHUB_OUTPUT
            echo "output-file=" >> $GITHUB_OUTPUT
          fi

      - name: Upload generated manifest
        if: steps.build.outputs.build-failed == 'false'
        uses: actions/upload-artifact@v4
        with:
          name: kubernetes-manifest-${{ inputs.service-name }}-${{ inputs.environment }}-${{ github.run_id }}
          path: ${{ steps.build.outputs.output-file }}
          retention-days: 1

      - name: Show manifest preview (diff mode)
        if: steps.build.outputs.build-failed == 'false' && inputs.action-type == 'diff'
        run: |
          echo "üëÄ Manifest Preview (first 50 lines):"
          echo "File: ${{ steps.build.outputs.output-file }}"
          echo "----------------------------------------"
          head -50 "${{ steps.build.outputs.output-file }}"
          echo "----------------------------------------"
          echo "üìä Total lines: $(wc -l < "${{ steps.build.outputs.output-file }}")"

  deploy-to-gitops:
    name: 'Deploy to GitOps Repository'
    needs: build-manifests
    if: needs.build-manifests.outputs.build-failed == 'false' && inputs.action-type == 'apply'
    runs-on: ubuntu-latest
    outputs:
      pr-number: ${{ steps.deploy.outputs.pr-number }}
      has-changes: ${{ steps.deploy.outputs.has-changes }}
    steps:
      - name: Download generated manifest
        uses: actions/download-artifact@v4
        with:
          name: kubernetes-manifest-${{ inputs.service-name }}-${{ inputs.environment }}-${{ github.run_id }}
          path: ./artifacts

      - name: Setup Git
        run: |
          git config --global user.name "GitHub Actions"
          git config --global user.email "noreply@github.com"

      - name: Clone target repository
        run: |
          echo "üì• Cloning target repository: ${{ inputs.target-repository }}"
          git clone "https://x-access-token:${{ secrets.github-token }}@github.com/${{ inputs.target-repository }}.git" target-repo
          cd target-repo
          git checkout "${{ inputs.target-branch }}" || git checkout -b "${{ inputs.target-branch }}"

      - name: Deploy to GitOps repository
        id: deploy
        run: |
          echo "üöÄ Deploying to GitOps repository"
          echo "Target: ${{ inputs.target-repository }}"
          echo "Branch: ${{ inputs.target-branch }}"
          echo "Service: ${{ inputs.service-name }}"
          echo "Environment: ${{ inputs.environment }}"
          
          cd target-repo
          
          # Create target directory structure
          TARGET_DIR="clusters/${{ inputs.environment }}/${{ inputs.service-name }}"
          mkdir -p "${TARGET_DIR}"
          
          # Copy manifest
          MANIFEST_FILE="${TARGET_DIR}/manifest.yaml"
          cp "../artifacts/${{ inputs.service-name }}-generated.yaml" "${MANIFEST_FILE}"
          
          # Check for changes
          if git diff --quiet HEAD; then
            echo "‚ÑπÔ∏è No changes detected"
            echo "has-changes=false" >> $GITHUB_OUTPUT
            echo "pr-number=" >> $GITHUB_OUTPUT
          else
            echo "üìù Changes detected, creating commit"
            git add .
            git commit -m "Update ${{ inputs.service-name }} manifests for ${{ inputs.environment }}

            Generated from: ${{ inputs.repository }}
            Source path: ${{ inputs.source-path }}
            
            ü§ñ Generated with [Claude Code](https://claude.ai/code)"
            
            # Create PR branch
            PR_BRANCH="update-${{ inputs.service-name }}-${{ inputs.environment }}-${{ github.run_id }}"
            git checkout -b "${PR_BRANCH}"
            git push origin "${PR_BRANCH}"
            
            # Create PR (simplified version)
            echo "has-changes=true" >> $GITHUB_OUTPUT
            echo "pr-number=${PR_BRANCH}" >> $GITHUB_OUTPUT  # Using branch name as identifier
            
            echo "‚úÖ Pushed changes to branch: ${PR_BRANCH}"
          fi

  exit-with-status:
    name: 'Exit with Appropriate Status'
    needs: [build-manifests, deploy-to-gitops]
    if: always()
    runs-on: ubuntu-latest
    steps:
      - name: Check final status
        run: |
          echo "üèÅ Checking final execution status"
          echo "Build Failed: ${{ needs.build-manifests.outputs.build-failed }}"
          echo "Action Type: ${{ inputs.action-type }}"
          
          if [ "${{ needs.build-manifests.outputs.build-failed }}" == "true" ]; then
            echo "::error::Kubernetes manifest generation failed for ${{ inputs.service-name }}:${{ inputs.environment }}"
            echo "Check the build logs for kustomize errors"
            exit 1
          fi

          if [ "${{ inputs.action-type }}" == "apply" ]; then
            if [ "${{ needs.deploy-to-gitops.outputs.has-changes }}" == "true" ]; then
              echo "‚úÖ Successfully created GitOps deployment for ${{ inputs.service-name }}:${{ inputs.environment }}"
              echo "Changes pushed to: ${{ inputs.target-repository }}"
            else
              echo "‚ÑπÔ∏è No changes detected for ${{ inputs.service-name }}:${{ inputs.environment }}"
              echo "Manifests are already up to date"
            fi
          else
            echo "‚úÖ Manifest diff completed successfully for ${{ inputs.service-name }}:${{ inputs.environment }}"
            echo "Review the manifest preview above"
          fi