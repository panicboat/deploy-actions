name: 'Test Label Dispatcher (Temporary)'

on:
  workflow_dispatch:
    inputs:
      test-mode:
        description: 'Test mode'
        required: false
        default: 'local'

jobs:
  test-local:
    name: 'Test Local Scripts'
    runs-on: ubuntu-latest
    steps:
      - name: Checkout deploy-actions
        uses: actions/checkout@v4

      - name: Setup Ruby
        uses: ruby/setup-ruby@v1
        with:
          ruby-version: '3.4'
          bundler-cache: true
          working-directory: scripts

      - name: Test config manager
        working-directory: scripts
        run: |
          echo "üß™ Testing config manager"
          bundle exec ruby config-manager/bin/config-manager template > test-config.yaml
          WORKFLOW_CONFIG_PATH=test-config.yaml bundle exec ruby config-manager/bin/config-manager validate

      - name: Test label dispatcher (dry run)
        working-directory: scripts
        run: |
          echo "üß™ Testing label dispatcher (without GitHub API)"
          bundle exec ruby label-dispatcher/bin/dispatcher test --base-ref=main --head-ref=feature/test || true
        env:
          WORKFLOW_CONFIG_PATH: test-config.yaml

      - name: Test deploy trigger (dry run)  
        working-directory: scripts
        run: |
          echo "üß™ Testing deploy trigger (without GitHub API)"
          bundle exec ruby deploy-trigger/bin/trigger test develop || true
        env:
          WORKFLOW_CONFIG_PATH: test-config.yaml

      - name: Install jq for stack filtering test
        run: sudo apt-get update && sudo apt-get install -y jq

      - name: Test stack filtering logic
        run: |
          echo "üß™ Testing stack filtering logic"
          
          # Simulate deployment targets JSON
          MOCK_TARGETS='[
            {"service": "auth-service", "environment": "develop", "stack": "terragrunt"},
            {"service": "auth-service", "environment": "develop", "stack": "kubernetes"},
            {"service": "api-gateway", "environment": "develop", "stack": "terragrunt"}
          ]'
          
          echo "Mock targets: ${MOCK_TARGETS}"
          
          # Test filtering
          TERRAGRUNT_TARGETS=$(echo "${MOCK_TARGETS}" | jq -c '[.[] | select(.stack == "terragrunt")]')
          KUBERNETES_TARGETS=$(echo "${MOCK_TARGETS}" | jq -c '[.[] | select(.stack == "kubernetes")]')
          
          echo "Terragrunt targets: ${TERRAGRUNT_TARGETS}"
          echo "Kubernetes targets: ${KUBERNETES_TARGETS}"
          
          # Verify filtering worked
          TG_COUNT=$(echo "${TERRAGRUNT_TARGETS}" | jq 'length')
          K8S_COUNT=$(echo "${KUBERNETES_TARGETS}" | jq 'length')
          
          echo "Terragrunt count: ${TG_COUNT}"
          echo "Kubernetes count: ${K8S_COUNT}"
          
          if [ "${TG_COUNT}" -eq 2 ] && [ "${K8S_COUNT}" -eq 1 ]; then
            echo "‚úÖ Stack filtering test passed"
          else
            echo "‚ùå Stack filtering test failed"
            exit 1
          fi