name: 'Kubernetes Executor'
description: 'Build Kubernetes manifests and deploy to GitOps repository'

inputs:
  github-token:
    description: 'GitHub token with required permissions'
    required: true
  service-name:
    description: 'Service name for Kubernetes deployment'
    required: true
  environment:
    description: 'Environment name (develop, staging, production, etc.)'
    required: true
  source-path:
    description: 'Source path for kustomize build'
    required: true
  action-type:
    description: 'Action type: diff (plan/preview) or apply (execute)'
    required: false
    default: 'diff'
  repository:
    description: 'Repository name (owner/repo)'
    required: true
  target-repository:
    description: 'Target GitOps repository'
    required: false
    default: 'panicboat/generated-manifests'
  target-branch:
    description: 'Target branch in GitOps repository'
    required: false
    default: 'main'

outputs:
  build-status:
    description: 'Build status (success/failure)'
    value: ${{ steps.build-manifests.outputs.status }}
  build-failed:
    description: 'Whether build failed'
    value: ${{ steps.build-manifests.outputs.build-failed }}
  deploy-pr-number:
    description: 'GitOps PR number/branch'
    value: ${{ steps.deploy-gitops.outputs.pr-number }}
  has-changes:
    description: 'Whether there are changes'
    value: ${{ steps.deploy-gitops.outputs.has-changes }}

runs:
  using: 'composite'
  steps:
    - name: Checkout source repository
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}
        token: ${{ inputs.github-token }}

    - name: Validate source path
      shell: bash
      run: |
        echo "🔍 Validating Kubernetes source path"
        echo "Source path: ${{ inputs.source-path }}"
        echo "Service: ${{ inputs.service-name }}"
        echo "Environment: ${{ inputs.environment }}"

        if [ ! -d "${{ inputs.source-path }}" ]; then
          echo "::error::Source path '${{ inputs.source-path }}' does not exist"
          echo "This may indicate a configuration issue or the service structure has changed."
          echo "Available kubernetes directories:"
          find . -type d -name "*kubernetes*" -o -name "*k8s*" | head -10
          exit 1
        fi

        echo "✅ Source path validated"

    - name: Install kustomize
      shell: bash
      run: |
        echo "🔧 Installing kustomize"
        curl -s "https://raw.githubusercontent.com/kubernetes-sigs/kustomize/master/hack/install_kustomize.sh" | bash
        sudo mv kustomize /usr/local/bin/
        kustomize version
        echo "✅ Kustomize installed"

    - name: Build Kubernetes manifests
      id: build-manifests
      shell: bash
      run: |
        echo "🏗️ Building Kubernetes manifests"
        echo "Source: ${{ inputs.source-path }}"
        echo "Service: ${{ inputs.service-name }}"

        # Create output directory
        mkdir -p generated-manifests
        OUTPUT_FILE="generated-manifests/${{ inputs.service-name }}-generated.yaml"

        # Build with kustomize
        if kustomize build "${{ inputs.source-path }}" > "${OUTPUT_FILE}" 2>build-error.log; then
          echo "✅ Manifest build successful"
          echo "status=success" >> $GITHUB_OUTPUT
          echo "build-failed=false" >> $GITHUB_OUTPUT
          echo "output-file=${OUTPUT_FILE}" >> $GITHUB_OUTPUT

          # Show generated manifest info
          echo "📋 Generated manifest info:"
          echo "  File: ${OUTPUT_FILE}"
          echo "  Size: $(wc -c < "${OUTPUT_FILE}") bytes"
          echo "  Resources: $(grep -c '^apiVersion:' "${OUTPUT_FILE}")"
        else
          echo "❌ Manifest build failed"
          echo "Error output:"
          cat build-error.log
          echo "status=failure" >> $GITHUB_OUTPUT
          echo "build-failed=true" >> $GITHUB_OUTPUT
          exit 1
        fi

    - name: Upload manifest artifact
      if: steps.build-manifests.outputs.status == 'success'
      uses: actions/upload-artifact@v4
      with:
        name: kubernetes-manifest-${{ inputs.service-name }}-${{ inputs.environment }}-${{ github.run_id }}
        path: ${{ steps.build-manifests.outputs.output-file }}
        retention-days: 1

    - name: Show manifest preview (diff mode)
      if: steps.build-manifests.outputs.build-failed == 'false' && inputs.action-type == 'diff'
      shell: bash
      run: |
        echo "👀 Manifest Preview (first 50 lines):"
        echo "File: ${{ steps.build-manifests.outputs.output-file }}"
        echo "----------------------------------------"
        head -50 "${{ steps.build-manifests.outputs.output-file }}"
        echo "----------------------------------------"
        echo "📊 Total lines: $(wc -l < "${{ steps.build-manifests.outputs.output-file }}")"

    - name: Deploy to GitOps repository
      id: deploy-gitops
      if: steps.build-manifests.outputs.status == 'success' && inputs.action-type == 'apply'
      shell: bash
      run: |
        echo "🚀 Deploying to GitOps repository"
        echo "Target: ${{ inputs.target-repository }}"
        echo "Branch: ${{ inputs.target-branch }}"
        echo "Service: ${{ inputs.service-name }}"
        echo "Environment: ${{ inputs.environment }}"

        # Setup Git
        git config --global user.name "GitHub Actions"
        git config --global user.email "noreply@github.com"

        # Clone target repository
        git clone "https://x-access-token:${{ inputs.github-token }}@github.com/${{ inputs.target-repository }}.git" target-repo
        cd target-repo
        git checkout "${{ inputs.target-branch }}" || git checkout -b "${{ inputs.target-branch }}"

        # Create target directory structure
        TARGET_DIR="clusters/${{ inputs.environment }}/${{ inputs.service-name }}"
        mkdir -p "${TARGET_DIR}"

        # Copy manifest
        MANIFEST_FILE="${TARGET_DIR}/manifest.yaml"
        cp "../${{ steps.build-manifests.outputs.output-file }}" "${MANIFEST_FILE}"

        # Check for changes
        if git diff --quiet HEAD; then
          echo "ℹ️ No changes detected"
          echo "has-changes=false" >> $GITHUB_OUTPUT
          echo "pr-number=" >> $GITHUB_OUTPUT
        else
          echo "📝 Changes detected, creating commit"
          git add .
          git commit -m "Update ${{ inputs.service-name }} manifests for ${{ inputs.environment }}

          Generated from: ${{ inputs.repository }}
          Source path: ${{ inputs.source-path }}

          🤖 Generated with [Claude Code](https://claude.ai/code)

          Co-Authored-By: Claude <noreply@anthropic.com>"

          # Create PR branch
          PR_BRANCH="update-${{ inputs.service-name }}-${{ inputs.environment }}-${{ github.run_id }}"
          git checkout -b "${PR_BRANCH}"
          git push origin "${PR_BRANCH}"

          echo "has-changes=true" >> $GITHUB_OUTPUT
          echo "pr-number=${PR_BRANCH}" >> $GITHUB_OUTPUT

          echo "✅ Pushed changes to branch: ${PR_BRANCH}"
        fi

    - name: Display results
      shell: bash
      run: |
        echo "📊 Kubernetes Execution Summary"
        echo "Service: ${{ inputs.service-name }}"
        echo "Environment: ${{ inputs.environment }}"
        echo "Action Type: ${{ inputs.action-type }}"
        echo "Build Status: ${{ steps.build-manifests.outputs.status }}"
        if [ "${{ inputs.action-type }}" = "apply" ]; then
          echo "GitOps Changes: ${{ steps.deploy-gitops.outputs.has-changes }}"
          echo "PR/Branch: ${{ steps.deploy-gitops.outputs.pr-number }}"
        fi
