name: 'Deploy Trigger'
description: 'Extract deployment targets from PR labels and branch information'
author: 'panicboat'

inputs:
  event-type:
    description: 'Event type: pull_request or push'
    required: true
  branch-name:
    description: 'Branch name for push events'
    required: false
  pr-number:
    description: 'PR number (from prepare job output or event)'
    required: false
  repository:
    description: 'Repository name (owner/repo)'
    required: true
  github-token:
    description: 'GitHub token with appropriate permissions'
    required: true
  config-path:
    description: 'Path to workflow configuration file'
    required: false
    default: '.github/config/workflow-config.yaml'

outputs:
  targets:
    description: 'Deployment targets JSON'
    value: ${{ steps.extract.outputs.targets }}
  has-targets:
    description: 'Whether targets found'
    value: ${{ steps.extract.outputs.has-targets }}
  terragrunt-targets:
    description: 'Terragrunt targets JSON'
    value: ${{ steps.filter.outputs.terragrunt-targets }}
  kubernetes-targets:
    description: 'Kubernetes targets JSON'
    value: ${{ steps.filter.outputs.kubernetes-targets }}
  has-terragrunt:
    description: 'Whether terragrunt targets exist'
    value: ${{ steps.filter.outputs.has-terragrunt }}
  has-kubernetes:
    description: 'Whether kubernetes targets exist'
    value: ${{ steps.filter.outputs.has-kubernetes }}
  target-environment:
    description: 'Target environment'
    value: ${{ steps.extract.outputs.target-environment }}
  safety-status:
    description: 'Safety check status'
    value: ${{ steps.extract.outputs.safety-status }}

runs:
  using: 'composite'
  steps:
    - name: Checkout deploy-actions
      uses: actions/checkout@v4
      with:
        repository: panicboat/deploy-actions
        path: deploy-actions

    - name: Checkout source repository
      uses: actions/checkout@v4
      with:
        repository: ${{ inputs.repository }}
        token: ${{ inputs.github-token }}
        path: source-repo

    - name: Setup Ruby
      uses: ruby/setup-ruby@v1
      with:
        ruby-version: '3.4'
        bundler-cache: true
        working-directory: deploy-actions/scripts

    - name: Copy configuration from source repository
      shell: bash
      run: |
        echo "📋 Copying configuration from source repository"
        echo "Source path: source-repo/${{ inputs.config-path }}"
        echo "Target path: deploy-actions/scripts/shared/workflow-config.yaml"

        if [ ! -f "source-repo/${{ inputs.config-path }}" ]; then
          echo "::error::Configuration file not found: ${{ inputs.config-path }}"
          exit 1
        fi

        cp "source-repo/${{ inputs.config-path }}" deploy-actions/scripts/shared/workflow-config.yaml
        echo "✅ Configuration copied successfully"

    - name: Validate configuration
      shell: bash
      working-directory: deploy-actions/scripts
      run: |
        echo "🔍 Validating configuration file"
        bundle exec ruby config-manager/bin/config-manager validate
      env:
        WORKFLOW_CONFIG_PATH: shared/workflow-config.yaml

    - name: Extract deployment targets
      id: extract
      shell: bash
      working-directory: deploy-actions/scripts
      run: |
        echo "🚀 Starting deployment target extraction"
        echo "Event type: ${{ inputs.event-type }}"
        echo "Branch: ${{ inputs.branch-name }}"
        echo "PR: ${{ inputs.pr-number }}"

        if [ "${{ inputs.event-type }}" = "pull_request" ]; then
          echo "Processing pull_request event"
          if [ -z "${{ inputs.pr-number }}" ]; then
            echo "::error::PR number is required for pull_request events"
            exit 1
          fi
          bundle exec ruby deploy-trigger/bin/trigger from_pr ${{ inputs.pr-number }}
        else
          echo "Processing push event"
          if [ -z "${{ inputs.pr-number }}" ]; then
            echo "::error::No merged PR found - deployment stopped"
            echo "has-targets=false" >> $GITHUB_OUTPUT
            echo "safety-status=no_merged_pr" >> $GITHUB_OUTPUT
            exit 0
          fi
          bundle exec ruby deploy-trigger/bin/trigger from_pr ${{ inputs.pr-number }}
        fi
      env:
        GITHUB_TOKEN: ${{ inputs.github-token }}
        GITHUB_REPOSITORY: ${{ inputs.repository }}
        WORKFLOW_CONFIG_PATH: shared/workflow-config.yaml

    - name: Parse deployment outputs
      id: parse
      shell: bash
      run: |
        echo "📊 Parsing deployment outputs"
        echo "DEPLOYMENT_TARGETS: ${DEPLOYMENT_TARGETS:-[]}"
        echo "HAS_TARGETS: ${HAS_TARGETS:-false}"
        echo "TARGET_ENVIRONMENT: ${TARGET_ENVIRONMENT:-unknown}"
        echo "SAFETY_STATUS: ${SAFETY_STATUS:-unknown}"

    - name: Filter targets by stack
      id: filter
      shell: bash
      run: |
        echo "🏗️ Filtering deployment targets by stack"
        
        # Parse DEPLOYMENT_TARGETS and filter by stack
        echo "terragrunt-targets=${TERRAGRUNT_TARGETS:-[]}" >> $GITHUB_OUTPUT
        echo "kubernetes-targets=${KUBERNETES_TARGETS:-[]}" >> $GITHUB_OUTPUT
        echo "has-terragrunt=${HAS_TERRAGRUNT:-false}" >> $GITHUB_OUTPUT
        echo "has-kubernetes=${HAS_KUBERNETES:-false}" >> $GITHUB_OUTPUT
      env:
        DEPLOYMENT_TARGETS: ${{ steps.extract.outputs.targets }}

    - name: Report results
      if: always()
      shell: bash
      run: |
        echo "📊 Deploy trigger completed"
        echo "Repository: ${{ inputs.repository }}"
        echo "Event Type: ${{ inputs.event-type }}"
        echo "PR Number: ${{ inputs.pr-number }}"
        echo "Branch: ${{ inputs.branch-name }}"
        echo "Has Targets: ${{ steps.extract.outputs.has-targets }}"
        echo "Target Environment: ${{ steps.extract.outputs.target-environment }}"
        echo "Safety Status: ${{ steps.extract.outputs.safety-status }}"