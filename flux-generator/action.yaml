name: 'Generate FluxCD Manifests'
description: 'Generate FluxCD manifests for multiple environments'
author: 'Your Organization'

branding:
  icon: 'package'
  color: 'blue'

runs:
  using: 'composite'
  steps:
    - name: Setup configuration
      id: config
      uses: actions/github-script@v7
      with:
        script: |
          const environments = 'develop,staging,production';
          core.setOutput('environments', environments);
          console.log(`üìã Configured environments: ${environments}`);

    - name: Setup directories
      uses: actions/github-script@v7
      env:
        ENVIRONMENTS: ${{ steps.config.outputs.environments }}
        GITHUB_WORKSPACE: ${{ github.workspace }}
      with:
        script: |
          const fs = require('fs');
          console.log('üîç Debug: Current working directory:', process.cwd());
          console.log('üîç Debug: GitHub workspace:', process.env.GITHUB_WORKSPACE);
          if (process.env.GITHUB_WORKSPACE) {
            process.chdir(process.env.GITHUB_WORKSPACE);
            console.log('üîÑ Changed to workspace:', process.cwd());
          }
          console.log('üîç Debug: Directory contents before:');
          fs.readdirSync('.').forEach(file => console.log('  -', file));
          
          console.log('üöÄ Setting up FluxCD directories...');
          const environments = process.env.ENVIRONMENTS.split(',');
          for (const env of environments) {
            console.log(`üì¶ Creating directories for environment: ${env}`);
            if (!fs.existsSync(env)) {
              console.log(`üìù Environment directory ${env} does not exist, creating empty FluxCD structure...`);
            }
            console.log(`üî® Creating: clusters/${env}/flux-system`);
            fs.mkdirSync(`clusters/${env}/flux-system`, { recursive: true });
            console.log(`üî® Creating: clusters/${env}/apps`);
            fs.mkdirSync(`clusters/${env}/apps`, { recursive: true });
          }
          
          console.log('üîç Debug: Directory contents after:');
          fs.readdirSync('.').forEach(file => console.log('  -', file));
          if (fs.existsSync('clusters')) {
            console.log('üîç Debug: clusters directory contents:');
            fs.readdirSync('clusters').forEach(file => console.log('  - clusters/', file));
          }

    - name: Generate flux-system kustomization files
      uses: actions/github-script@v7
      env:
        ENVIRONMENTS: ${{ steps.config.outputs.environments }}
        GITHUB_WORKSPACE: ${{ github.workspace }}
      with:
        script: |
          if (process.env.GITHUB_WORKSPACE) {
            process.chdir(process.env.GITHUB_WORKSPACE);
          }
          const path = require('path');
          const { generateFluxSystemKustomization } = require(path.join(process.env.GITHUB_ACTION_PATH, 'flux-system-kustomization.js'));
          const environments = process.env.ENVIRONMENTS.split(',');
          for (const env of environments) {
            generateFluxSystemKustomization(env);
          }

    - name: Generate gotk-sync files
      uses: actions/github-script@v7
      env:
        ENVIRONMENTS: ${{ steps.config.outputs.environments }}
        GITHUB_WORKSPACE: ${{ github.workspace }}
      with:
        script: |
          if (process.env.GITHUB_WORKSPACE) {
            process.chdir(process.env.GITHUB_WORKSPACE);
          }
          const path = require('path');
          const { generateGotkSync } = require(path.join(process.env.GITHUB_ACTION_PATH, 'gotk-sync.js'));
          const environments = process.env.ENVIRONMENTS.split(',');
          for (const env of environments) {
            generateGotkSync(env);
          }

    - name: Generate apps kustomization files
      uses: actions/github-script@v7
      env:
        ENVIRONMENTS: ${{ steps.config.outputs.environments }}
        GITHUB_WORKSPACE: ${{ github.workspace }}
      with:
        script: |
          if (process.env.GITHUB_WORKSPACE) {
            process.chdir(process.env.GITHUB_WORKSPACE);
          }
          const path = require('path');
          const { generateAppsKustomization } = require(path.join(process.env.GITHUB_ACTION_PATH, 'apps-kustomization.js'));
          const environments = process.env.ENVIRONMENTS.split(',');
          for (const env of environments) {
            console.log(`üìù Generating app manifests for ${env}...`);
            generateAppsKustomization(env);
          }

    - name: Generate app resource files
      uses: actions/github-script@v7
      env:
        ENVIRONMENTS: ${{ steps.config.outputs.environments }}
        GITHUB_WORKSPACE: ${{ github.workspace }}
      with:
        script: |
          if (process.env.GITHUB_WORKSPACE) {
            process.chdir(process.env.GITHUB_WORKSPACE);
          }
          const path = require('path');
          const fs = require('fs');
          const { generateAppResources } = require(path.join(process.env.GITHUB_ACTION_PATH, 'app-resources.js'));

          function findYamlFiles(dir) {
            let results = [];
            const list = fs.readdirSync(dir);
            list.forEach(file => {
              const filepath = path.join(dir, file);
              const stat = fs.statSync(filepath);
              if (stat && stat.isDirectory()) {
                results = results.concat(findYamlFiles(filepath));
              } else if (filepath.endsWith('.yaml')) {
                results.push(filepath);
              }
            });
            return results.sort();
          }

          const environments = process.env.ENVIRONMENTS.split(',');
          for (const env of environments) {
            if (fs.existsSync(env)) {
              const yamlFiles = findYamlFiles(env);
              if (yamlFiles.length > 0) {
                generateAppResources(env, yamlFiles);
              }
            }
            console.log(`‚úÖ Generated FluxCD manifests for ${env}`);
          }
          console.log('üéâ FluxCD manifests generation completed!');
          
          console.log('üîç Debug: Final directory structure:');
          if (fs.existsSync('clusters')) {
            function listDir(dir, prefix = '') {
              const items = fs.readdirSync(dir);
              for (const item of items) {
                const itemPath = path.join(dir, item);
                console.log(prefix + item);
                if (fs.statSync(itemPath).isDirectory()) {
                  listDir(itemPath, prefix + '  ');
                }
              }
            }
            listDir('clusters', '  ');
          } else {
            console.log('‚ùå clusters directory was not created!');
          }
