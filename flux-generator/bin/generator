#!/usr/bin/env ruby

# CLI interface for FluxCD manifest generation
# Provides commands for generating FluxCD resources using Clean Architecture

require_relative '../application'
require 'thor'

class FluxGeneratorCLI < Thor
  def self.exit_on_failure?
    true
  end
  desc "generate", "Generate FluxCD manifests for specified environments"
  method_option :environments,
                aliases: ['-e'],
                type: :array,
                default: %w[develop staging production],
                desc: "Target environments (space separated)"
  method_option :repository_url,
                aliases: ['-r'],
                type: :string,
                desc: "Git repository URL (auto-detected from GITHUB_REPOSITORY if not provided)"
  method_option :verbose,
                aliases: ['-v'],
                type: :boolean,
                default: false,
                desc: "Verbose output"
  method_option :target_dir,
                aliases: ['-t'],
                type: :string,
                desc: "Output directory for generated manifests (defaults to current directory)"
  def generate
    setup_logging if options[:verbose]

    # Change to output directory if specified
    original_dir = Dir.pwd
    Dir.chdir(options[:target_dir]) if options[:target_dir]

    controller = FluxGeneratorContainer.resolve(:flux_generator_controller)
    controller.generate_all(options[:environments], options[:repository_url])
  rescue => e
    say_error "Error: #{e.message}", :red
    exit(1) unless options[:verbose]
    raise
  ensure
    Dir.chdir(original_dir) if options[:target_dir]
  end

  desc "validate", "Validate environment directories and manifests"
  method_option :environments,
                aliases: ['-e'],
                type: :array,
                default: %w[develop staging production],
                desc: "Target environments (space separated)"
  def validate
    say "üîç Validating environments: #{options[:environments].join(', ')}", :blue

    controller = FluxGeneratorContainer.resolve(:validation_controller)
    controller.validate_environments(options[:environments])
  end

  desc "setup", "Setup directory structure for environments"
  method_option :environments,
                aliases: ['-e'],
                type: :array,
                default: %w[develop staging production],
                desc: "Target environments (space separated)"
  def setup
    say "üöÄ Setting up FluxCD directory structure...", :green

    controller = FluxGeneratorContainer.resolve(:setup_controller)
    controller.setup_directories(options[:environments])
    controller.setup_missing_directories
    controller.setup_missing_kustomizations(options[:environments])

    say "‚úÖ Directory setup completed!", :green
  end

  desc "version", "Show version information"
  def version
    say "FluxCD Generator Ruby v1.0.0", :green
    say "Clean Architecture implementation for FluxCD manifest generation", :blue
  end

  desc "help_usage", "Show usage examples and tips"
  def help_usage
    puts <<~USAGE
      üìã FluxCD Generator Usage Examples

      üöÄ Basic Usage:
      # Generate manifests for all environments
      #{File.basename($0)} generate

      # Generate for specific environments
      #{File.basename($0)} generate -e develop staging

      # With custom repository URL
      #{File.basename($0)} generate -r https://github.com/your-org/manifests

      üîç Validation:
      # Validate all environments
      #{File.basename($0)} validate

      # Validate specific environments
      #{File.basename($0)} validate -e develop

      üõ†Ô∏è  Setup:
      # Create directory structure
      #{File.basename($0)} setup

      üí° Tips:
      - Repository URL is auto-detected from GITHUB_REPOSITORY environment variable
      - Use --verbose for detailed output
      - All commands work with or without existing manifest files

      üîó GitHub Actions Integration:
      The action will use: #{File.basename($0)} generate --verbose
    USAGE
  end

  private

  def setup_logging
    puts "üîß Verbose mode enabled"
  end
end

FluxGeneratorCLI.start(ARGV)
